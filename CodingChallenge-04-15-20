#This problem was asked by Stripe.

#Given an array of integers, find the first missing positive
#integer in linear time and constant space. In other words,
#find the lowest positive integer that does not exist in the array.
#The array can contain duplicates and negative numbers as well.

#For example, the input [3, 4, -1, 1] should give 2.
#The input [1, 2, 0] should give 3.

_________________________________________________________________________________________________
         
missing_num <- function() {   
  
  n <- sample(-10:10,5)              #create random test vector of integers between -10 and 10, of length 10
  print(n)                           #display elemets of created vector
  n <- sort(unique(n[n >0]))         #order vector, remove duplicates, ensure all values are greater than 0
  
  if(length(n) == 0 ){               #if all vector elements are negative, missing value is 1
    k <- 1
    return(k)
  }

n <- sort(unique(n[n >0]))         #order vector, remove duplicates, ensure all values are greater than 0

for (i in 1:length(n)) {

  if(i != n[i]) {                  #if iteration (i) is not equal to value in n, the missing number must be equal to i
    k <- i
    return(k)
    break
  }
  
  if(i == length(n)) {             #if all values of i were equal to n[i], the missing number must be the next outside the array
    k <- i + 1
    return(k)
    break
  }
}
}


for(i in 1:20) {                  #for loop to test 20 outcomes of the function
print(missing_num())               
}

_________________________________________________________________________________________________
